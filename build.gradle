import com.enricog.tempo.buildsrc.Libs
import com.enricog.tempo.buildsrc.Versions

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Libs.Kotlin.version}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${Libs.Kotlin.version}"
        classpath "com.google.dagger:hilt-android-gradle-plugin:${Libs.Hilt.androidVersion}"

        classpath 'com.google.gms:google-services:4.3.15'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'

        classpath "org.jlleitschuh.gradle:ktlint-gradle:11.0.0"

        classpath 'com.github.triplet.gradle:play-publisher:3.7.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.osacky.doctor" version "0.8.1"
    id 'org.jetbrains.kotlin.jvm' version '1.7.21' apply false
}
apply plugin: "org.jlleitschuh.gradle.ktlint"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {

    tasks.withType(Test) {
        testLogging {
            exceptionFormat "full"
            events "started", "skipped", "passed", "failed"
            showStandardStreams true
        }
        test {
            failFast = true
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-opt-in=kotlin.contracts.ExperimentalContracts"
            freeCompilerArgs += "-opt-in=kotlin.time.ExperimentalTime"
            freeCompilerArgs += "-opt-in=kotlin.ExperimentalStdlibApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.FlowPreview"

            // Enable experimental compose APIs
            freeCompilerArgs += "-opt-in=androidx.compose.material.ExperimentalMaterialApi"
            freeCompilerArgs += "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi"
            freeCompilerArgs += "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi"
            freeCompilerArgs += "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
            freeCompilerArgs += "-opt-in=com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi"

            // Allow TestParameters to work with TestParametersInjector
            freeCompilerArgs += "-java-parameters"

            // Compose compiler metrics
            if (project.findProperty("enableComposeCompilerReports") == "true") {
                freeCompilerArgs += [
                        "-P",
                        "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
                                project.buildDir.absolutePath + "/compose_metrics"
                ]
                freeCompilerArgs += [
                        "-P",
                        "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
                                project.buildDir.absolutePath + "/compose_metrics"
                ]
            }

            jvmTarget = Versions.jvmTarget
        }
    }

    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        version = "0.43.2"
        debug = true
        verbose = true
        android = true
        outputToConsole = true
        outputColorName = "RED"
        ignoreFailures = true
        disabledRules = [
                "max-line-length"
        ]
        reporters {
            reporter "plain"
            reporter "checkstyle"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

Object getPropValue(varName, defaultValue) {
    def value = project.properties[varName]
    if (value == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('config.properties').newDataInputStream())
        value = properties.getProperty(varName) ?: defaultValue
    }
    return value
}
